diff --git a/node_modules/@zazuko/query-rdf-data-cube/dist/es/index.js b/node_modules/@zazuko/query-rdf-data-cube/dist/es/index.js
index 06113d8..60dfc3a 100644
--- a/node_modules/@zazuko/query-rdf-data-cube/dist/es/index.js
+++ b/node_modules/@zazuko/query-rdf-data-cube/dist/es/index.js
@@ -826,11 +826,7 @@ class SparqlFetcher {
         });
     }
     options(body = "") {
-        const options = clone(this.fetchOptions);
-        if (body) {
-            options.body = body;
-        }
-        return options;
+        return {...this.fetchOptions, body};
     }
 }
 /**
@@ -909,7 +905,7 @@ class Query {
         this.languages = options.languages || [];
         this.dataCube = dataCube;
         this.state = baseState;
-        this.fetcher = new SparqlFetcher(this.dataCube.endpoint);
+        this.fetcher = dataCube.fetcher;
     }
     /**
      * Decide what data needs to be returned by the query.
@@ -1630,10 +1626,10 @@ class DataCube {
      * `{ value: "Something", language: "en" }`
      * @param options.languages Languages in which to get the label, by priority, e.g. `["de", "en"]`.
      */
-    constructor(endpoint, options) {
+    constructor(endpoint, fetcher, options) {
         this.componentsLoaded = false;
         const { iri, label, graphIri, extraMetadata } = options;
-        this.fetcher = new SparqlFetcher(endpoint);
+        this.fetcher = fetcher;
         this.endpoint = endpoint;
         this.iri = iri.value;
         this.graphIri = graphIri.value;
@@ -1651,7 +1647,7 @@ class DataCube {
      */
     static fromJSON(json) {
         const obj = JSON.parse(json);
-        const dataCube = new DataCube(obj.endpoint, {
+        const dataCube = new DataCube(obj.endpoint, undefined, {
             iri: namedNode(obj.iri),
             graphIri: namedNode(obj.graphIri),
             label: obj.label,
@@ -2368,7 +2364,7 @@ class DataCubeEntryPoint {
         }, {});
         Object.entries(dataCubesByIri)
             .forEach(([iri, dataCube]) => {
-            this.cachedDataCubes.set(iri, new DataCube(this.endpoint, dataCube));
+            this.cachedDataCubes.set(iri, new DataCube(this.endpoint, this.fetcher, dataCube));
         });
     }
     generateQuery({ graphIri, dataCubeIri } = {}) {
diff --git a/node_modules/@zazuko/query-rdf-data-cube/dist/node/index.js b/node_modules/@zazuko/query-rdf-data-cube/dist/node/index.js
index 4a109dc..bcf2682 100644
--- a/node_modules/@zazuko/query-rdf-data-cube/dist/node/index.js
+++ b/node_modules/@zazuko/query-rdf-data-cube/dist/node/index.js
@@ -832,11 +832,7 @@ class SparqlFetcher {
         });
     }
     options(body = "") {
-        const options = clone(this.fetchOptions);
-        if (body) {
-            options.body = body;
-        }
-        return options;
+        return {...this.fetchOptions, body};
     }
 }
 /**
@@ -915,7 +911,7 @@ class Query {
         this.languages = options.languages || [];
         this.dataCube = dataCube;
         this.state = baseState;
-        this.fetcher = new SparqlFetcher(this.dataCube.endpoint);
+        this.fetcher = dataCube.fetcher;
     }
     /**
      * Decide what data needs to be returned by the query.
@@ -1636,10 +1632,10 @@ class DataCube {
      * `{ value: "Something", language: "en" }`
      * @param options.languages Languages in which to get the label, by priority, e.g. `["de", "en"]`.
      */
-    constructor(endpoint, options) {
+    constructor(endpoint, fetcher, options) {
         this.componentsLoaded = false;
         const { iri, label, graphIri, extraMetadata } = options;
-        this.fetcher = new SparqlFetcher(endpoint);
+        this.fetcher = fetcher;
         this.endpoint = endpoint;
         this.iri = iri.value;
         this.graphIri = graphIri.value;
@@ -1657,7 +1653,7 @@ class DataCube {
      */
     static fromJSON(json) {
         const obj = JSON.parse(json);
-        const dataCube = new DataCube(obj.endpoint, {
+        const dataCube = new DataCube(obj.endpoint, undefined, {
             iri: dataModel.namedNode(obj.iri),
             graphIri: dataModel.namedNode(obj.graphIri),
             label: obj.label,
@@ -2374,7 +2370,7 @@ class DataCubeEntryPoint {
         }, {});
         Object.entries(dataCubesByIri)
             .forEach(([iri, dataCube]) => {
-            this.cachedDataCubes.set(iri, new DataCube(this.endpoint, dataCube));
+            this.cachedDataCubes.set(iri, new DataCube(this.endpoint, this.fetcher, dataCube));
         });
     }
     generateQuery({ graphIri, dataCubeIri } = {}) {
